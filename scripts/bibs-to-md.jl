function load_bib_files(c)

  #for c in dirs
  dir = joinpath(BIB_FOLDER, c)
  bib_list = []

  for file in readdir(dir)
    bib = joinpath(BIB_FOLDER, c, file)

    isdir(bib) && (continue)
    data = import_bibtex(bib)

    push!(bib_list, data)
  end
  #end
  #
  if isempty(bib_list)
    return []
  end
  

  return merge(bib_list...)
end


function sortrule(a, b)
    ayear = xyear(a) |> strip
    byear = xyear(b) |> strip

    if ayear > byear
      return true
    end

    return false

  end


function write_md(c)
  @info "Loading files in $c..."
  data = load_bib_files(c)

  if isempty(data)
    return
  end


  years = []
  

  @info "Ordering bib..."
  sort!(data, lt = sortrule, by = x -> data[x])

  md_txt = """
  <!--
  File generated by bibs-to-md.jl
  -->
  +++
  title = "$(uppercase(c))"
  hascode = false
  +++

  # $(uppercase(c))
  """


  @info "Creating MD"
  for k in keys(data)
    entry = data[k]


    authors = xnames(entry) |> tex2unicode
    link = xlink(entry)
    title = xtitle(entry) |> tex2unicode |> strip
    published_in = xin(entry) |> tex2unicode |> strip
    year = xyear(entry) |> strip
    push!(years, year)

    md_txt *= """
    ~~~
    <div class="reference">
    ~~~
    ### $title
    - **Authors**: $authors
    - **Published in**: $(linkify(published_in, link))
    ~~~
    </div>
    ~~~
    """

  end

  fname = joinpath(MD_PATH, "$c.md")
  open(fname,"w") do io
    println(io, md_txt)
  end


  open(STATISTICS_FILE,"a") do io
    for y in years
      !isempty(y) && println(io, y)
    end
  end

end

function generate_md()
  !isdir(MD_PATH) && mkdir(MD_PATH)

  # stats
  open(STATISTICS_FILE,"w") do io
    print(io, "")
  end

  dirs = string.(Char.(65:90))
  for c in dirs
    write_md(c)
  end

end

